# -*- coding: utf-8 -*-
"""Day4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11cWvg9wWVl00j0kPpHuiJZSncA2JoRmS
"""

!pip install pandas   # install library into the google colab

import numpy as np
import pandas as pd
from google.colab import files
uploaded=files.upload()

dataSet=pd.read_csv('MOCK_DATA.csv')
print(dataSet)

print(dataSet.shape)
print(dataSet.head(5))

#mapping income Data Set to 0 and 1
#print(dataSet['income'])
dataSet['income']=dataSet['income'].map({'<=50k':0,'>50k':1}).astype(int)
print(dataSet['income'])

# Categorize data into input and output 
X=dataSet.iloc[:,:-1].values
print(X)
Y=dataSet.iloc[:,-1].values
print(Y)

#Split  data into Train and Test 
from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,Y,test_size=0.25,random_state=0)

#feathure scalling 
from sklearn.preprocessing import StandardScaler 
SC=StandardScaler()
X_train=SC.fit_transform(X_train)
X_test=SC.transform(X_test)
print(X_test)

!pip install sklearn

# find the best K value
error=[]
from sklearn.neighbors import KNeighborsClassifier
import matplotlib.pyplot as plt

for i in range(1,40):
  model=KNeighborsClassifier(n_neighbors=i)
  model.fit(X_train,y_train)
  pred_i=model.predict(X_test)
  error.append(np.mean(pred_i !=y_test))

plt.figure(figsize=(12,6))
plt.plot(range(1, 40),error, color='red', linestyle='dashed', marker='o', markerfacecolor='blue', markersize=10)
plt.title('Error Rate K value')
plt.xlabel=('K value') 
plt.ylabel=('Mean Error')

"""Train model using selected K value 
6
"""

from sklearn.neighbors import KNeighborsClassifier
model=KNeighborsClassifier(n_neighbors=6,metric='minkowski',p=2)
model.fit(X_train,y_train)

y_pred = model.predict(X_test) #

from sklearn.metrics import confusion_matrix, accuracy_score
print("Accuracy of the model is {0}%".format(accuracy_score(y_test,y_pred)*100) )

age = int(input("Enter Age"))
edu=int(input("Education"))
capitalGain = int(input("Enter Capital Gain"))
#workperhour=int(input("Work per hour"))
newEmp=[[age,edu,capitalGain]]  
result=model.predict(SC.transform(newEmp))
print(result)
if result == 1:
  print('Employee salary might be >=50K')
else:
  print('Employee salary might be <50K')

